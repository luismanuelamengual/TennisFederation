
function Source (config)
{
    var me = this;
    var id = Source.autoId+1 || 1;
    config = config || {};
    me.id = config.id || ("source" + id);
    me.autoLoad = config.autoLoad || false;
    me.data = [];
    me.url = config.url || null;
    me.extraParams = config.extraParams || {};
    me.pageSize = config.pageSize || 100;
    me.remoteFilters = config.remoteFilters || false;
    me.remoteSorters = config.remoteSorters || false;
    me.filters = config.filters || [];
    me.sorters = config.sorters || []; 
    me.page = 1;
    me.dataChangeListeners = [];
    me.loading = false;
    me.loadPending = null;
        
    if (config.data)
        me.loadData(config.data);
        
    if (me.autoLoad)
        me.load();
}

Source.sources = [];
Source.registerSource = function (source)
{
    Source.sources[source.id] = source;
};

Source.getSource = function (id)
{
    return Source.sources[id];
};

Source.prototype.getData = function ()
{
    return this.data;
};

Source.prototype.setData = function (data)
{
    var me = this;
    me.data = data;
    me.fireDataChange (me);
};

Source.prototype.loadData = function (data)
{
    var me = this;
    
    if (!me.remoteFilters)
    {
        if (me.filters.length > 0)
        {
            for (var i = data.length-1; i >= 0; i--)
            {
                var dataItem = data[i];
                for (var j in me.filters)
                {
                    var filter = me.filters[j];
                    var objField = dataItem[filter.property];
                    if (!objField.toString().match(filter.value))
                    {
                        data.splice(i,1);
                        break;
                    }
                }
            }
        }
    }
    
    if (!me.remoteSorters)
    {
        if (me.sorters.length > 0)
        {
            data.sort(function (obj1, obj2)
            {
                var result = 0;
                for (var i in me.sorters)
                {
                    var sorter = me.sorters[i];
                    var obj1Field = obj1[sorter.property];
                    var obj2Field = obj2[sorter.property];
                    
                    if (obj1Field < obj2Field)
                    {
                        result = sorter.direction=="ASC"? -1 : 1;
                        break;
                    }
                    else if (obj1Field > obj2Field)
                    {
                        result = sorter.direction=="ASC"? 1 : -1;
                        break;
                    }
                }
                return result;
            });
        }
    }
    
    me.setData(data);
};

Source.prototype.setAutoLoad = function (autoLoad)
{
    this.autoLoad = autoLoad;
};

Source.prototype.setPageSize = function (pageSize)
{
    this.pageSize = pageSize;
};

Source.prototype.addDataChangeListener = function(listener)
{
    this.dataChangeListeners.push(listener);
};

Source.prototype.fireDataChange = function(source)
{
    for (var i in this.dataChangeListeners)
    {
        var listener = this.dataChangeListeners[i];
        listener(source);
    }
};

Source.prototype.setExtraParams = function(extraParams)
{
    this.extraParams = extraParams;
}

Source.prototype.setExtraParam = function (key, value)
{
    this.extraParams[key] = value;
}

Source.prototype.removeExtraParam = function (key)
{
    delete this.extraParams[key];
}

Source.prototype.load = function (config)
{
    var me = this;
    config = config || {};
    if (!me.loading)
    {
        me.loading = true;
        me.loadPending = null;
        me.page = config.page || 1;
        if (me.url)
        {
            var params = {};
            if (config.params)
            {
                params = config.params;
            }
            else
            {
                var pageSize = config.pageSize || me.pageSize;
                params = $.extend(params, config.extraParams || me.extraParams);
                params.start = (me.page-1) * pageSize;
                params.limit = pageSize;
                if (me.remoteFilters)
                {
                    params.filters = me.filters;
                }
                if (me.remoteSorters)
                {
                    params.sorters = me.sorters;
                }
            }
            
            $.ajax(
            {
                url: config.url || me.url,
                method: config.method || "GET",
                data: params,
                success: function (json, status, xhr) 
                { 
                    if (!me.loadPending)
                    {
                        try 
                        { 
                            me.loadData(jQuery.parseJSON(json)); 
                            if (config.success)
                            {
                                config.success(me.getData());
                            }
                        } 
                        catch (e) 
                        {
                            if (config.error)
                            {
                                config.error(e);
                            }
                        }
                    }
                },
                error: function () 
                {
                    if (config.error) { config.error(); }
                },
                timeout: function () 
                {
                    if (config.error) { config.error(); }
                },
                complete: function () 
                {
                    me.loading = false;
                    if (me.loadPending)
                        me.load(me.loadPending);
                }
            });
        }
    }
    else
    {
        me.loadPending = config;
    }
};

Source.prototype.loadPage = function (page)
{
    var me = this;
    me.load ({page: page});
};

Source.prototype.loadNextPage = function ()
{
    var me = this;
    if (me.hasNextPage())
        me.load ({page: me.page + 1});
};

Source.prototype.loadPreviousPage = function ()
{
    var me = this;
    if (me.hasPreviousPage())
        me.load ({page: me.page - 1});
};

Source.prototype.hasNextPage = function ()
{
    return this.data.length >= this.pageSize;
};

Source.prototype.hasPreviousPage = function ()
{
    return this.page > 1;
};