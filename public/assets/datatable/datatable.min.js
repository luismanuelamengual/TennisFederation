
(function($) {

    $.fn.datatable = function(options) 
    {
        var settings = $.extend({}, options);    
        return this.each( function() {
            
            var $table = $(this);
            $table.data("source", settings.source);
            $table.data("columns", settings.columns || []);
            $table.data("scrollY", settings.scrollY || false);
            $table.data("scrollX", settings.scrollX || false);
            initializeTable ($table);
        });
    }
    
    function initializeTable ($table)
    {
        initializeTableStructure ($table);
        initializeHeaders ($table);
        initializeData ($table);
        initializePaginationControls ($table);
        initializeSearchControls ($table);
        initializeSelection ($table);
    }
    
    function initializeTableStructure ($table)
    {
        var $tableParent = $table.parent();
        
        //Configuración de la tabla original
        $table.detach();

        //Creación de una tabla para albergar el header
        var $headerTable = $("<table>");
        $headerTable.attr("class", $table.attr("class"));
        $headerTable.attr("style", $table.attr("style"));
        $headerTable.css("margin-bottom", "0px");
        $headerTable.css("width", "100%");
        $headerTable.css("table-layout", "fixed");
        var $tableHead = $table.find("thead");
        if ($tableHead.length > 0) 
        {
            $tableHead.detach();
            $headerTable.append($tableHead);
        }
        else
        {
            var $headerTableHead = $("<thead>");
            var $headerTableHeadRow = $("<tr>");
            $headerTableHeadRow.appendTo($headerTableHead);
            $headerTableHead.appendTo($headerTable);
        }
        
        //Creación del area de headers
        var $dataTableHead = $("<div>").addClass("datatable-head");
        $dataTableHead.css("position", "relative");
        $dataTableHead.css("overflow", "hidden");
        var $dataTableHeadContainer = $("<div>").addClass("datatable-head-container");
        $dataTableHeadContainer.append($headerTable);
        $dataTableHeadContainer.appendTo($dataTableHead);

        //Creación del area de del cuerpo de la tabla
        var $dataTableBody = $("<div>").addClass("datatable-body");
        $dataTableBody.css("overflow", "auto");
        $dataTableBody.css("position", "relative");
        var scrollY = $table.data("scrollY");
        if (scrollY) 
        {
            if (scrollY == true) 
                $dataTableBody.css("height", "100%");
            else
                $dataTableBody.css("max-height", scrollY + "px");
        }
        var scrollX = $table.data("scrollX");
        if (scrollX) 
        {
            if (scrollX == true) 
                $dataTableBody.css("width", "100%");
            else
                $dataTableBody.css("max-width", scrollX + "px");
        }
        $dataTableBody.append($table);
        $dataTableBody.scroll(function () { $table.trigger("bodyScroll"); });
        
        //Creación del wrapper de tabla
        var $dataTable = $("<div>").addClass("datatable");
        $dataTable.append($dataTableHead);
        $dataTable.append($dataTableBody);
        $dataTable.appendTo($tableParent);
    }
    
    function initializeHeaders ($table)
    {
        updateHeader($table);
        $table.resize(function (){ updateHeader($table); }) ;
        $table.on("dataChanged bodyScroll", function (){ updateHeader($table); });
    }
    
    function initializeData ($table)
    {
        var source = $table.data("source");
        source.addDataChangeListener(function (source) { updateData ($table, source.data); });
        if (source.data && source.data.length > 0)
            updateData ($table, source.data);
    }
    
    function initializePaginationControls ($table)
    {
        var tableId = $table[0].id;
        $("[data-target=\"#" + tableId + "\"][data-datatable-action=previousPage]").click(function() { $table.data("source").loadPreviousPage(); });
        $("[data-target=\"#" + tableId + "\"][data-datatable-action=nextPage]").click(function() { $table.data("source").loadNextPage(); });        
        updatePaginationControls ($table);
        $table.on("dataChanged", function () { updatePaginationControls ($table); });
    }
    
    function initializeSearchControls ($table)
    {
        var tableId = $table[0].id;
        $("[data-target=\"#" + tableId + "\"][data-datatable-action=search]").keyup(function()
        {
            var $searchField = $(this);
            if ($table[0].searchTimer)
                clearTimeout($table[0].searchTimer);
            $table[0].searchTimer = setTimeout(function () 
            {
                var source = $table.data("source");
                var value = $searchField.val();
                if (value.length >= 2)
                    source.setExtraParam("query", value);
                else
                    source.removeExtraParam("query");
                source.load();
                $table[0].searchTimer = null;
            }, 300);
        });
    }
    
    function initializeSelection ($table)
    {
        $table.data("selectedItems", []);
        $table.on("dataChanged", function () { setSelection ($table, []); });
        $table.click(function(event) 
        {
            var target = event.srcElement || event.target;
            var $target = $(target);
            var $row = $target.closest("tr");
            var dataItem = $row.data("item");
            setSelection ($table, [dataItem]);
        });
        $table.contextmenu(function(event) 
        {
            var target = event.srcElement || event.target;
            var $target = $(target);
            var $row = $target.closest("tr");
            var dataItem = $row.data("item");
            setSelection ($table, [dataItem]);
            $table.trigger("contextMenu", [dataItem, $row]);
        });
    }
    
    function setSelection ($table, selectedItem)
    {
        var oldSelectedItems = $table.data("selectedItems");
        var selectedItems = jQuery.isArray(selectedItem)? selectedItem : [selectedItem];
        
        var selectionChanged = false;
        if (oldSelectedItems.length == selectedItems.length)
        {
            for (var i in oldSelectedItems)
            {
                if (oldSelectedItems[i] != selectedItems[i])
                {
                    selectionChanged = true;
                    break;
                }
            }
        }
        else
        {
            selectionChanged = true;
        }
        
        if (selectionChanged)
        {
            $table.data("selectedItems", selectedItems);
            updateSelection($table);
            $table.trigger("selectionChange", [selectedItems]);
        }
    }
    
    function updateSelection ($table)
    {
        var selectedItems = $table.data("selectedItems");
        $table.find("tr.info").removeClass("info");
        $table.find("tr").each(function()
        {
            var $row = $(this);
            if (jQuery.inArray($row.data("item"), selectedItems) >= 0)
            {
                $row.addClass("info");
            }
        });
    }
    
    function updateHeader ($table) 
    {
        var $headerTable = $table.closest(".datatable").find(".datatable-head table");        
        
        //Actualización de los headers
        var tableWidth = 0;
        var columns = $table.data("columns");
        var source = $table.data("source"); 
        var $headerTableHead = $headerTable.find("thead tr");
        $headerTableHead.find("th:gt(" + (columns.length - 1) + ")").remove();
        for (var i in columns)
        {
            var column = columns[i];
            if (!column.hidden)
            {
                //Obtención del header (y creación en caso de que no exista)
                var $th = $headerTableHead.find("th:eq(" + i + ")");
                if ($th.length == 0)
                    $th = $("<th>").appendTo($headerTableHead);
                
                //Actualización del estado de ordenamiento de la columna
                $th.removeClass("sorted-asc");
                $th.removeClass("sorted-desc");
                if (source.sorters.length > 0)
                {
                    var filterField = column.sortField || column.dataField;
                    if (filterField)
                    {
                        for (var j in source.sorters)
                        {
                            var sorter = source.sorters[j];
                            if (sorter.property == filterField)
                            {
                                if (sorter.direction == "ASC")
                                {
                                    $th.addClass("sorted-asc");
                                }
                                else 
                                {
                                    $th.addClass("sorted-desc");
                                }
                            }
                        }
                    }
                }
                
                //Actualización del título
                if (column.title && (column.title != $th.html()))
                {
                    $th.html(column.title);
                }
                
                //Actualización del ancho
                var columnWidth = column.width || 150;
                
                //Establecimiento del ancho de la tabla principal
                var $tableColgroup = $table.find("colgroup");
                if ($tableColgroup.length == 0)
                    $tableColgroup = $("<colgroup>").prependTo($table);
                
                var $tableCol = $tableColgroup.find("col:eq(" + i + ")");
                if ($tableCol.length == 0)
                    $tableCol = $("<col>").appendTo($tableColgroup);
                $tableCol.width(columnWidth);
                
                //Establecimiento del ancho de la tabla de header
                var $headerTableColgroup = $headerTable.find("colgroup");
                if ($headerTableColgroup.length == 0)
                    $headerTableColgroup = $("<colgroup>").prependTo($headerTable);
                
                var $headerTableCol = $headerTableColgroup.find("col:eq(" + i + ")");
                if ($headerTableCol.length == 0)
                    $headerTableCol = $("<col>").appendTo($headerTableColgroup);
                $headerTableCol.width(columnWidth);
                
                tableWidth += columnWidth;
            }
        }
        
        //Reposicionamiento y redimensionado del header
        $table.width(tableWidth);
        $headerTable.width(tableWidth);
        $headerTable.offset({left: $table.offset().left});
    }
    
    function updateData ($table, data)
    {
        data = data || $table.data("source").data;
        $table.trigger("beforeDataChanged", [data]);
        var columns = $table.data("columns");
        var $tbody = $("<tbody>");
        for (var i in data)
        {
            var dataItem = data[i];
            var $tr = $("<tr>");
            $tr.data("item", dataItem);
            for (var j in columns)
            {
                var column = columns[j];
                if (!column.hidden)
                {
                    var dataValue = column.defaultValue || "";
                    if (jQuery.isPlainObject(dataItem))
                    {
                        var dataItemValue = null;
                        if (column.dataField) 
                        {
                            dataItemValue = getDataField(dataItem, column.dataField);
                        }
                        else if (column.template)
                        {
                            dataItemValue = column.template;
                            var dataFields = dataItemValue.match (/[^{}]+(?=\})/g);
                            for (var k = 0; k < dataFields.length; k++)
                            {
                                var dataField = dataFields[k];
                                dataItemValue = dataItemValue.replace("{" + dataField + "}", getDataField (dataItem, dataField));
                            }
                        }
                        if (dataItemValue != null)
                        {
                            dataValue = dataItemValue;
                        }
                    }
                    else 
                    {
                        dataValue = dataItem[j];
                    }
                    var $td = $("<td>");
                    $td.html(column.renderer? column.renderer(dataValue) : dataValue);
                    $tr.append($td);
                }
            }
            $tbody.append($tr);
        }
        $table.find("tbody").remove();
        $table.append($tbody);
        $table.trigger("dataChanged", [data]);
    }
    
    function updatePaginationControls ($table)
    {
        var tableId = $table[0].id;
        var source = $table.data("source");
        var $previousButton = $("[data-target=\"#" + tableId + "\"][data-datatable-action=previousPage]");
        var $nextButton = $("[data-target=\"#" + tableId + "\"][data-datatable-action=nextPage]");
        if (!source.hasPreviousPage())
            $previousButton.addClass("disabled");
        else
            $previousButton.removeClass("disabled");
        if (!source.hasNextPage())
            $nextButton.addClass("disabled");
        else
            $nextButton.removeClass("disabled");
    }
    
    function getDataField (dataItem, dataField)
    {
        var dataValue = null;
        var dataFieldTokens = dataField.split(".");
        var dataFieldReference = null;
        for (var k = 0; k < dataFieldTokens.length; k++)
        {
            if (dataFieldReference == null)
            {
                dataFieldReference = dataItem[dataFieldTokens[k]];
            }
            else
            {
                dataFieldReference = dataFieldReference[dataFieldTokens[k]];
            }
            if (dataFieldReference != null)
            {
                dataValue = dataFieldReference; 
            }
        }
        return dataValue;
    }
    
}(jQuery));